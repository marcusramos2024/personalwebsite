{"ast":null,"code":"var _jsxFileName = \"/Users/marcusramos/Desktop/Marcus Ramos/marcus/src/components/Navbar/Navbar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Navbar.css';\nimport { FaWifi, FaBatteryFull } from 'react-icons/fa';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Navbar = () => {\n  _s();\n  // State to hold the current date and time\n  const [currentTime, setCurrentTime] = useState(new Date());\n  useEffect(() => {\n    // Function to update the current time every second\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000); // Update every second\n\n    // Cleanup the interval on component unmount\n    return () => clearInterval(timer);\n  }, []);\n\n  // Function to format the date and time\n  const formatTime = date => {\n    const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    const dayName = days[date.getDay()];\n    const month = months[date.getMonth()];\n    const day = date.getDate();\n    let hours = date.getHours();\n    const minutes = date.getMinutes();\n    const ampm = hours >= 12 ? 'PM' : 'AM';\n    hours = hours % 12;\n    hours = hours ? hours : 12; // Convert '0' to '12'\n\n    const minutesStr = minutes < 10 ? `0${minutes}` : minutes;\n    return `${dayName} ${month} ${day} ${hours}:${minutesStr} ${ampm}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"navbar-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-left\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"apple-logo\",\n        src: \"./assets/Apple Logo.svg\",\n        alt: \"Logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"navbar-left-text\",\n        children: \"Marcus Ramos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-right\",\n      children: [/*#__PURE__*/_jsxDEV(FaBatteryFull, {\n        className: \"navbar-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FaWifi, {\n        className: \"navbar-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"navbar-text\",\n        children: formatTime(currentTime)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(Navbar, \"f3elDUct5ap4W3FuLtGG73aMsLc=\");\n_c = Navbar;\nexport default Navbar;\nvar _c;\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"names":["React","useState","useEffect","FaWifi","FaBatteryFull","jsxDEV","_jsxDEV","Navbar","_s","currentTime","setCurrentTime","Date","timer","setInterval","clearInterval","formatTime","date","days","months","dayName","getDay","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","ampm","minutesStr","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/marcusramos/Desktop/Marcus Ramos/marcus/src/components/Navbar/Navbar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Navbar.css';\nimport { FaWifi, FaBatteryFull } from 'react-icons/fa';\n\nconst Navbar = () => {\n  // State to hold the current date and time\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  useEffect(() => {\n    // Function to update the current time every second\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000); // Update every second\n\n    // Cleanup the interval on component unmount\n    return () => clearInterval(timer);\n  }, []);\n\n  // Function to format the date and time\n  const formatTime = (date) => {\n    const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    const months = [\n      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n      'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n    ];\n\n    const dayName = days[date.getDay()];\n    const month = months[date.getMonth()];\n    const day = date.getDate();\n\n    let hours = date.getHours();\n    const minutes = date.getMinutes();\n    const ampm = hours >= 12 ? 'PM' : 'AM';\n\n    hours = hours % 12;\n    hours = hours ? hours : 12; // Convert '0' to '12'\n\n    const minutesStr = minutes < 10 ? `0${minutes}` : minutes;\n\n    return `${dayName} ${month} ${day} ${hours}:${minutesStr} ${ampm}`;\n  };\n\n  return (\n    <div className=\"navbar-container\">\n      <div className=\"navbar-left\">\n        <img className=\"apple-logo\" src=\"./assets/Apple Logo.svg\" alt=\"Logo\" />\n        <span className=\"navbar-left-text\">Marcus Ramos</span>\n      </div>\n      <div className=\"navbar-right\">\n        <FaBatteryFull className=\"navbar-icon\" />\n        <FaWifi className=\"navbar-icon\" />\n        <p className=\"navbar-text\">{formatTime(currentTime)}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Navbar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}